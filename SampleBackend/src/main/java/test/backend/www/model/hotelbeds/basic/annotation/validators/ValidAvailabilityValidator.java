/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package test.backend.www.model.hotelbeds.basic.annotation.validators;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import test.backend.www.model.hotelbeds.basic.messages.AvailabilityRQ;

public class ValidAvailabilityValidator implements ConstraintValidator<ValidAvailability, AvailabilityRQ> {

    @Override
    public void initialize(final ValidAvailability constraintAnnotation) {
    }

    @Override
    public boolean isValid(final AvailabilityRQ availabilityRQ, final ConstraintValidatorContext context) {
        boolean result = true;
        context.disableDefaultConstraintViolation();
        result = validOnlyUniqueFilterDestinationOrGeolocationOrHotels(availabilityRQ, context);
        return result;
    }

    private boolean validOnlyUniqueFilterDestinationOrGeolocationOrHotels(final AvailabilityRQ availabilityRQ,
        final ConstraintValidatorContext context) {
        boolean result = true;
        int found = 0;
        if (availabilityRQ.getDestination() != null) {
            found = found + 1;
        }
        if (availabilityRQ.getGeolocation() != null) {
            found = found + 1;
        }
        if (availabilityRQ.getHotelsFilter() != null) {
            found = found + 1;
        }
        if (found == 0 || found > 1) {
            context
                .buildConstraintViolationWithTemplate(
                    "{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.AvailabilityFilter.validOnlyUniqueFilterDestinationOrGeolocationOrHotels.message}")
                .addConstraintViolation();
            result = false;
        }
        return result;
    }

}
