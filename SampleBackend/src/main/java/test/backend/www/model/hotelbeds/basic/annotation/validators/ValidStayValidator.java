/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package test.backend.www.model.hotelbeds.basic.annotation.validators;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import test.backend.www.model.hotelbeds.basic.model.Stay;

public class ValidStayValidator implements ConstraintValidator<ValidStay, Stay> {

    private long maxDaysRange;

    @Override
    public void initialize(final ValidStay constraintAnnotation) {
        maxDaysRange = constraintAnnotation.maxDaysRange();
    }

    @Override
    public boolean isValid(final Stay stay, final ConstraintValidatorContext context) {
        boolean result = true;
        context.disableDefaultConstraintViolation();
        if (stay.getCheckIn().isEqual(stay.getCheckOut())) {
            context.buildConstraintViolationWithTemplate("{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Stay.dates.before.message}")
                .addConstraintViolation();
            result = false;
        } else if (stay.getCheckIn().isAfter(stay.getCheckOut())) {
            context.buildConstraintViolationWithTemplate("{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Stay.dates.before.message}")
                .addConstraintViolation();
            result = false;
        } else if (!isValidDateRange(stay.getCheckIn(), stay.getCheckOut())) {
            context.buildConstraintViolationWithTemplate("{com.hotelbeds.distribution.hotel_api_webapp.webapp.api.model.Stay.dates.range.message}")
                .addConstraintViolation();
            result = false;
        }
        return result;
    }

    private boolean isValidDateRange(LocalDate checkIn, LocalDate checkOut) {
        final long days = ChronoUnit.DAYS.between(checkIn, checkOut);
        if (Long.valueOf(days).compareTo(maxDaysRange) > 0) {
            return false;
        }
        return true;
    }
}
