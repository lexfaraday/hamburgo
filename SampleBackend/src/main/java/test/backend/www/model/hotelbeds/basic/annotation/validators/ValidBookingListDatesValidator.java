/**
 * Autogenerated code by SdkModelGenerator.
 * Do not edit. Any modification on this file will be removed automatically after project build
 *
 */
package test.backend.www.model.hotelbeds.basic.annotation.validators;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import test.backend.www.model.hotelbeds.basic.messages.BookingListRQ;

public class ValidBookingListDatesValidator implements ConstraintValidator<ValidBookingListDates, Object> {

    private long maxDaysRange;

    @Override
    public void initialize(ValidBookingListDates constraintAnnotation) {
        maxDaysRange = constraintAnnotation.maxDaysRange();
    }

    @Override
    public boolean isValid(Object value, ConstraintValidatorContext context) {
        if (!(value instanceof BookingListRQ)) {
            throw new IllegalArgumentException("Expected a parameter of type XMLBookingListRQ or JSONBookingListRQ");
        }
        LocalDate start = null;
        LocalDate end = null;
        if (value instanceof BookingListRQ) {
            start = ((BookingListRQ) value).getStart();
            end = ((BookingListRQ) value).getEnd();
        }

        context.disableDefaultConstraintViolation();
        if (start.isAfter(end)) {
            context.buildConstraintViolationWithTemplate(
                "{com.hotelbeds.distribution.hotel_api_webapp.webapp.internal.messages.BookingListRQ.dates.before.message}").addConstraintViolation();
            return false;
        } else if (!isValidDateRange(start, end)) {
            context.buildConstraintViolationWithTemplate(
                "{com.hotelbeds.distribution.hotel_api_webapp.webapp.internal.messages.BookingListRQ.dates.range.message}").addConstraintViolation();
            return false;
        }
        return true;
    }

    private boolean isValidDateRange(LocalDate checkIn, LocalDate checkOut) {
        final long days = ChronoUnit.DAYS.between(checkIn, checkOut);
        if (Long.valueOf(days).compareTo(maxDaysRange) > 0) {
            return false;
        }
        return true;
    }
}
